<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>A Random Walk Down Wall Street</title>
      <link href="/2022/04/15/a-random-walk-down-wall-street/"/>
      <url>/2022/04/15/a-random-walk-down-wall-street/</url>
      
        <content type="html"><![CDATA[<h1 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h1><ul><li><p>什么是投资：投资是一种购买资产的方式，其目的是为了获得可以合理预期的收入（股息，利息或者租金），并且在较长的时期里获得资产增值。</p></li><li><p>投资与投机的区别：两者的区别通常就在于对投资回报期的定义和投资回报的可预期性。</p></li><li><p>必不可少的两种理论：坚实基础理论(firm-foudation theory)和空中阁楼理论(castle-in-the-air theory)</p></li><li><p>坚实基础理论：<br>  坚实理论声称：每一个投资工具，无论他是一只普通股还是一处房地产，都有一个被称为内在价值(intrinsic value)的坚实基础，通过细致分析这个投资工具的现状和前景，可以确定它的内在价值。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Books </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Books Finace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Time - Problems</title>
      <link href="/2022/04/15/unsolved-problems/"/>
      <url>/2022/04/15/unsolved-problems/</url>
      
        <content type="html"><![CDATA[<ul><li><p>LeetCode 148 Sort List: </p><blockquote><p>这题需要看穿要用什么方法排序链表，最方便的算法是归并排序，因为链表无法索引，但是交换位置却与数组一样快。</p></blockquote></li><li><p>LeetCode 179 Largest Number: </p><blockquote><p>这里其实运用sort就可以，但是需要注意的是字典序是什么样的，以及c++里面比较字典序的方法。字典序其实就是在两个string之间逐位比较ascall大小，在c++中比较字典序可以直接用&gt;,&lt;。</p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Binary Search</title>
      <link href="/2022/04/13/binary-search/"/>
      <url>/2022/04/13/binary-search/</url>
      
        <content type="html"><![CDATA[<h2 id="二分问题"><a href="#二分问题" class="headerlink" title="二分问题"></a>二分问题</h2><p>这里需要注意以下几个问题：</p><ol><li>while里面是&lt;还是&lt;=</li><li>left和right赋值的时候需不需要加1</li><li>如何找相同target的左边界</li><li>如何找相同target的右边界</li></ol><p>具体可以参照：<a href="https://github.com/labuladong/fucking-algorithm/blob/master/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A3.md" target="_blank" rel="noopener">https://github.com/labuladong/fucking-algorithm/blob/master/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A3.md</a></p><p>模板：</p><p>1.正常寻找数：</p><pre class="line-numbers language-c++"><code class="language-c++">int binarySearch(int[] nums, int target) {    int left = 0;     int right = nums.length - 1; // 注意    while(left <= right) {        int mid = left + (right - left) / 2;        if(nums[mid] == target)            return mid;         else if (nums[mid] < target)            left = mid + 1; // 注意        else if (nums[mid] > target)            right = mid - 1; // 注意    }    return -1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>寻找左边界：</p><pre class="line-numbers language-c++"><code class="language-c++">int left_bound(int[] nums, int target) { if (nums.length == 0) return -1; int left = 0; int right = nums.length; // 注意 while (left < right) { // 注意     int mid = (left + right) / 2;     if (nums[mid] == target) {  // 可以和大于的部分合并         right = mid;     } else if (nums[mid] < target) {         left = mid + 1;     } else if (nums[mid] > target) {         right = mid; // 注意     } } //这里也有可能超界，虽然退出while循环的条件是left=right，但left可能会收缩到right这里，比如[2,2] target=3 //这时候再去判断nums[left]就会超界，所以需要if(left < nums.size() && nums[left] == target) ..... return left;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>寻找右边界</p></li></ol><pre class="line-numbers language-c++"><code class="language-c++">int right_bound(int[] nums, int target) {    if (nums.length == 0) return -1;    int left = 0, right = nums.length;    while (left < right) {        int mid = (left + right) / 2;        if (nums[mid] == target) {  //可以和小于合并            left = mid + 1; // 注意        } else if (nums[mid] < target) {            left = mid + 1;        } else if (nums[mid] > target) {            right = mid;        }    }    //如果需要的话，这里可以加上越界判断，因为left-1在[2,2] target = 0的情况可能会超界，这里left=0,left-1=-1超出界限    //所以可以if(left-1>=0 && nums[left] == target) ....    return left - 1; // 注意  //这里一定要注意，因为left=mid+1, 所以mid=left-1                            //也就是从mid=target这里往后走一个，走到最后一定会超过一个，所以这里left要-1}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Add by Bit</title>
      <link href="/2022/04/13/add-by-bit/"/>
      <url>/2022/04/13/add-by-bit/</url>
      
        <content type="html"><![CDATA[<h2 id="逐位相加模板"><a href="#逐位相加模板" class="headerlink" title="逐位相加模板"></a>逐位相加模板</h2><pre class="line-numbers language-c++"><code class="language-c++">while ( A 没完 || B 没完)    A 的当前位    B 的当前位    和 = A 的当前位 + B 的当前位 + 进位carry    当前位 = 和 % 10;    进位 = 和 / 10;判断还有进位吗<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>练习题lc 989</p><p>Solution范例:</p><pre class="line-numbers language-c++"><code class="language-c++">class Solution {    public List<Integer> addToArrayForm(int[] A, int K) {        int n = A.length;        List<Integer> res = new ArrayList<>();  // 可以用 LinkeList，或者 ArrayList 往后加，最后反转        int i = n - 1, sum = 0, carry = 0;        while (i >= 0 || K != 0) {  // 循环条件：两个数有一个没完            int x = i >= 0 ? A[i]: 0;            int y = K != 0 ? K % 10 : 0;            sum = x + y + carry;            carry = sum / 10;            K = K / 10;            i--;            res.add(0, sum % 10);        }        if (carry != 0) res.add(0, carry);        return res;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic Program</title>
      <link href="/2022/04/13/dynamic-program/"/>
      <url>/2022/04/13/dynamic-program/</url>
      
        <content type="html"><![CDATA[<h2 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h2><h3 id="01背包问题及其变种："><a href="#01背包问题及其变种：" class="headerlink" title="01背包问题及其变种："></a>01背包问题及其变种：</h3><h4 id="背包问题："><a href="#背包问题：" class="headerlink" title="背包问题："></a>背包问题：</h4><p>   横轴是物品数量，竖轴是背包容量，两个可以互换，但是只用做这种就足够了</p><p>   关于初始化一定要注意，可以只初始化第一行，因为以后的每一个element都是由上方或者上左来决定的，所以左边一行可以不初始化。</p><p>   不过关于物品是从0开始还是从1开始需要想好，这关于着第一行如何初始化，如果选1作为开始就比较简单，单纯的初始化成0就可以，因为0个物品不管容量多少value都是0.</p><p>   但是如果物品从0开始的话，就需要不同的初始化。第0行的时候，我们需要比较背包容量与物品weight的大小关系，大于物品weight就可以直接装，所以初始化为value[i], 小于则直接为0，如下:</p><pre class="line-numbers language-c++"><code class="language-c++">   for(int i = 0; i < col; ++i)   {       dp[0][i] = 0;       if(i >= weight[0])   dp[0][i] = value[0];   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   这里就可以直接选简单的，让物品从1开始，初始化如下:</p><pre class="line-numbers language-c++"><code class="language-c++">    for(int i = 0; i <= col; ++i)    {        dp[0][i] = 0;    }    for(int i = 0; i <= row; ++i)    {        dp[i][0] = 0;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  最后就是在每个element比较的时候，可以先赋值，然后再去比较，不用if-else那么写了</p><pre class="line-numbers language-c++"><code class="language-c++">    for(int i = 1; i <= row; ++i)    {        for(int j = 1; j <= col; ++j)        {            dp[i][j] = dp[i-1][j];            if(j >= weight[i-1])            {                dp[i][j] = max(dp[i-1][j], dp[i-1][j - weight[i-1]] + value[i-1]);            }        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  还有一个需要强调的超界错误就是，由于物品是从1开始的，所以上面代码里面访问的时候需要从weight[i-1]对应访问，用i会超界。</p><h4 id="01背包变种："><a href="#01背包变种：" class="headerlink" title="01背包变种："></a>01背包变种：</h4><p>   详情可以参见LeetCode-416, 1049</p><p>   这两个都是等和数组分割问题，可以转化成01背包问题来做，思路是：<br>   等和问题 -&gt; 求集合使得其和为数组一半， 其为一个指数问题，复杂度O(2^n) -&gt; 转化为背包问题来做，使得value和weight均为nums[i], 最后得到的value就是集合最接近一半的重量</p><p>   这里把416的code贴一下，顺便可以参考背包问题的写法：</p><pre class="line-numbers language-c++"><code class="language-c++">   class Solution {    public:    bool canPartition(vector<int>& nums) {        int dp[201][20001];        int sumOfNum = 0;        for(int i = 0; i < nums.size(); ++i)        {            sumOfNum += nums[i];        }        if(sumOfNum % 2 == 1)   return false;        int target = sumOfNum / 2;        for(int i = 0; i <= nums.size(); ++i)        {            dp[i][0] = 0;        }        for(int i = 0; i < target; ++i)        {            dp[0][i] = 0;        }        for(int i = 1; i <= nums.size(); ++i)        {            for(int j = 1; j <= target; ++j)            {                dp[i][j] = dp[i-1][j];                if(j >= nums[i-1])                {                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-nums[i-1]]+nums[i-1]);                }            }        }        if(dp[nums.size()][target] == target)   return true;        else    return false;    }    };<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h3><p>在01背包的基础上，将每个的物品个数改成无数个</p><p>这里其实是01背包的变种，我们可以简单的把01背包状态压缩时的代码内层循环正序过来就好了，原因如下：</p><p>在01背包里面，状态压缩的时候，我们对于背包容量是倒序遍历的，因为他本身的dp[i][j]是从dp[i-1][j]和dp[i-1][j-w[i-1]]+v[i-1]来推导的，也就是来自于当前element的上方或者(上一行)左上方，因此要保证正确的推导，在压缩的时候需要倒着遍历来保证dp[i-w[i-1]]没有被更新过，也就是还是dp[i-1][…]的状态，没有被更新成当前的dp[i][….].</p><p>而这里的完全背包物品个数有无数个，在二维状态下，递推公式应该变为:</p><pre class="line-numbers language-c++"><code class="language-c++">dp[i][j] = max(dp[i-1][j], dp[i][j-w[i-1]+v[i-1]])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[不同之处就在于，在取第i个物品的时候，我们变成从dp[i][j-w[i-1]]来取，也就是包含前i个物品的最大。<br>这样就能够保证我们可以重复取任意次ith物品，因为从dp[i][0] -&gt; dp[i][1] -&gt; dp[i][2] …. 可以取任意次。]</p><p>因此完全背包的状态压缩，对于某一个element需要从上方和左方推导，我们要保证当前遍历的dp[i-w[i]]是已经被更新了的，也就对应着dp[i][…]而不是dp[i-1][…].</p><p>详细可以看：<a href="https://segmentfault.com/a/1190000023763857" target="_blank" rel="noopener">https://segmentfault.com/a/1190000023763857</a></p><h4 id="完全背包遍历顺序存在组合数与排列数问题-–-两个for循环的位置调换"><a href="#完全背包遍历顺序存在组合数与排列数问题-–-两个for循环的位置调换" class="headerlink" title="完全背包遍历顺序存在组合数与排列数问题 – 两个for循环的位置调换"></a>完全背包遍历顺序存在组合数与排列数问题 – 两个for循环的位置调换</h4><p>详情：<a href="https://www.programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html#%E6%80%9D%E8%B7%AF" target="_blank" rel="noopener">https://www.programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html#%E6%80%9D%E8%B7%AF</a></p><h3 id="习题总结篇可以参考"><a href="#习题总结篇可以参考" class="headerlink" title="习题总结篇可以参考"></a>习题总结篇可以参考</h3><p><a href="https://www.programmercarl.com/%E8%83%8C%E5%8C%85%E6%80%BB%E7%BB%93%E7%AF%87.html#%E8%83%8C%E5%8C%85%E9%80%92%E6%8E%A8%E5%85%AC%E5%BC%8F" target="_blank" rel="noopener">https://www.programmercarl.com/%E8%83%8C%E5%8C%85%E6%80%BB%E7%BB%93%E7%AF%87.html#%E8%83%8C%E5%8C%85%E9%80%92%E6%8E%A8%E5%85%AC%E5%BC%8F</a></p><h3 id="树形DP（很有意思可以看看）"><a href="#树形DP（很有意思可以看看）" class="headerlink" title="树形DP（很有意思可以看看）"></a>树形DP（很有意思可以看看）</h3><p><a href="https://www.programmercarl.com/0337.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DIII.html#_337-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-iii" target="_blank" rel="noopener">https://www.programmercarl.com/0337.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DIII.html#_337-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-iii</a></p><h3 id="编辑距离问题（从一个字符串删除多少字符串可以到另一个字符串）"><a href="#编辑距离问题（从一个字符串删除多少字符串可以到另一个字符串）" class="headerlink" title="编辑距离问题（从一个字符串删除多少字符串可以到另一个字符串）"></a>编辑距离问题（从一个字符串删除多少字符串可以到另一个字符串）</h3><p>LeetCode 392  <a href="https://www.programmercarl.com/0392.%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97.html" target="_blank" rel="noopener">https://www.programmercarl.com/0392.%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97.html</a><br>LeetCode 115  <a href="https://www.programmercarl.com/0115.%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97.html" target="_blank" rel="noopener">https://www.programmercarl.com/0115.%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97.html</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
